#include "lfi_linux.h"

#include <assert.h>
#include <unistd.h>
#include <stdlib.h>
#include <sys/mman.h>

#define LOG_TAG "lfi-{{.lib}}"

#ifdef __ANDROID__

#include <android/log.h>

#define LOG(...) \
    ((void) __android_log_print(ANDROID_LOG_INFO, LOG_TAG, __VA_ARGS__))

#else

#define LOG(fmt, ...) \
    fprintf(stderr, "[" LOG_TAG "] " fmt "\n", ##__VA_ARGS__)

#endif

#define ERROR(...)        \
    do {                  \
        LOG(__VA_ARGS__); \
        abort();          \
    } while (0)

#define LINUX_RTLD_NOW 2

_Thread_local struct LFIContext *{{.lib}}_ctx;

struct LFIBox *{{.lib}}_box;

static const char *library_file = "{{.lib_path}}";

static void
resolve(struct LFILinuxProc *proc, lfiptr *loc, const char *name)
{
    lfiptr addr = lfi_proc_sym(proc, name);
    if (addr == 0)
        LOG("error: symbol not found: %s", name);
    *loc = addr;
}

struct Buf {
    void *data;
    size_t size;
};

static struct Buf
readfile(const char *path)
{
    FILE *f = fopen(path, "r");
    if (!f) {
        return (struct Buf) { 0 };
    }
    fseek(f, 0, SEEK_END);
    size_t sz = ftell(f);
    void *p = mmap(NULL, sz, PROT_READ, MAP_PRIVATE, fileno(f), 0);
    assert(p != (void *) -1);
    fclose(f);
    return (struct Buf) {
        .data = p,
        .size = sz,
    };
}

static void
{{.lib}}_init_internal(bool dynamic)
{
    // Create engine if it does not exist.
    bool ok = lfi_linux_lib_init((struct LFIOptions) {
        .boxsize = 4UL * 1024 * 1024 * 1024,
        .pagesize = getpagesize(),
        .verbose = false,
    }, (struct LFILinuxOptions) {
        .stacksize = 2UL * 1024 * 1024,
        .verbose = false,
    });
    if (!ok)
        ERROR("error: failed to initialize liblfi");

    // Create proc from file.
    struct Buf prog = readfile(library_file);
    if (!prog.data)
        ERROR("error: failed to open %s", library_file);

    struct LFILinuxProc *proc = lfi_proc_new(lfi_linux_lib_engine());
    if (!proc)
        ERROR("error: failed to create LFI proc");

    ok = lfi_proc_load(proc, prog.data, prog.size);
    if (!ok)
        ERROR("error: failed to load LFI library");

    // Initialize return.
    lfi_box_init_ret(lfi_proc_box(proc));

    // Initialize callbacks.
    ok = lfi_box_cbinit(lfi_proc_box(proc));
    if (!ok)
        ERROR("error: failed to initialize LFI callbacks");

    // Create and run thread.
    const char *argv[] = {
        "{{.lib}}",
        NULL,
    };

    const char *envp[] = {
        NULL,
    };

    struct LFILinuxThread *t = lfi_thread_new(proc,
        sizeof(argv)/sizeof(argv[0]), &argv[0], &envp[0]);
    if (!t)
        ERROR("failed to initialize LFI thread");
    int result = lfi_thread_run(t);
    if (result != 0)
        ERROR("LFI thread returned non-zero value: %d", result);

    // Initialize clone.
    lfi_linux_init_clone(t);

    if (dynamic) {
        // Inject dlopen call.
        lfiptr handle = LFI_INVOKE(lfi_proc_box(proc), lfi_thread_ctxp(t),
                lfi_proc_sym(proc, "dlopen"), lfiptr, (const char *, int),
                library_file, LINUX_RTLD_NOW);
        if (!handle)
            ERROR("error: dlopen could not load %s", library_file);
        if (!lfi_box_ptrvalid(lfi_proc_box(proc), handle))
            ERROR("error: dlopen returned invalid pointer");

        // Inject dlsym calls.
        lfiptr dlsym = lfi_proc_sym(proc, "dlsym");
{{- range $sym := .syms}}
        extern lfiptr {{$.lib}}_addr_{{$sym}};
        lfiptr sym = LFI_INVOKE(lfi_proc_box(proc), lfi_thread_ctxp(t),
                dlsym, lfiptr, (lfiptr, const char *), handle, "{{$sym}}");
        if (sym == 0)
            LOG("error: symbol not found: {{$sym}}");
        {{$.lib}}_addr_{{$sym}} = sym;
{{- end}}
    } else {
        // Initialize all exported symbols.
{{- range $sym := .syms}}
        extern lfiptr {{$.lib}}_addr_{{$sym}};
        resolve(proc, &{{$.lib}}_addr_{{$sym}}, "{{$sym}}");
{{- end}}
    }

    {{.lib}}_box = lfi_proc_box(proc);
    {{.lib}}_ctx = *lfi_thread_ctxp(t);
}

__attribute__((constructor)) void
{{.lib}}_init(void)
{
    {{.lib}}_init_internal(false);
}

void *
{{.lib}}_malloc(size_t size)
{
    return lfi_lib_malloc(&{{.lib}}_ctx, size);
}

void *
{{.lib}}_realloc(size_t size)
{
    return lfi_lib_realloc(&{{.lib}}_ctx, size);
}

void *
{{.lib}}_calloc(size_t count, size_t size)
{
    return lfi_lib_calloc(&{{.lib}}_ctx, count, size);
}

void
{{.lib}}_free(void *p)
{
    return lfi_lib_free(&{{.lib}}_ctx, p);
}
